#include <avr/pgmspace.h>

#ifndef _UTIL_H_
#define _UTIL_H_

#define _DEBUG(x)\
		do{\
			Serial.print(#x);\
			Serial.print(": ");\
			Serial.println(x);\
		}while(false)

#define _FIRST_CHAR 32
#define _LAST_CHAR 164

const byte charmap[] PROGMEM =
{
0x01,0x00,										// 32 ESPACIO
0x01,0xFD,										// 33 !
0x03,0xE0,0x00,0xE0,							// 34 "
0x05,0x24,0xFF,0x24,0xFF,0x24,					// 35 #
0x05,0x24,0x52,0xFF,0x52,0x4C,					// 36 $
0x05,0x62,0x64,0x08,0x13,0x23,					// 37 %
0x05,0x6E,0x99,0xA5,0x42,0x05,					// 38 &
0x01,0xE0,										// 39 '
0x03,0x18,0x66,0x81,							// 40 (
0x03,0x81,0x66,0x18,							// 41 )
0x05,0x14,0x08,0x3E,0x08,0x14,					// 42 *
0x05,0x08,0x08,0x3E,0x08,0x08,					// 43 +
0x02,0x05,0x06,									// 44 ,
0x05,0x08,0x08,0x08,0x08,0x08,					// 45 -
0x02,0x03,0x03,									// 46 .
0x06,0x03,0x04,0x08,0x10,0x20,0xC0,				// 47 /
0x05,0x7E,0x81,0x81,0x81,0x7E,					// 48 0
0x05,0x01,0x81,0xFF,0x01,0x01,					// 49 1
0x05,0x43,0x85,0x89,0x91,0x63,					// 50 2
0x05,0x42,0x81,0x91,0x91,0x6E,					// 51 3
0x06,0x0C,0x14,0x64,0x85,0xFF,0x05,				// 52 4
0x05,0x02,0xF1,0x91,0x91,0x8E,					// 53 5
0x05,0x3E,0x51,0x91,0x91,0x8E,					// 54 6
0x05,0xC0,0x80,0x83,0x9C,0xE0,					// 55 7
0x05,0x6E,0x91,0x91,0x91,0x6E,					// 56 8
0x05,0x71,0x89,0x89,0x8A,0x7C,					// 57 9
0x02,0x66,0x66,									// 58 :
0x02,0x65,0x66,									// 59 ;
0x03,0x08,0x14,0x22,							// 60 <
0x03,0x14,0x14,0x14,							// 61 =
0x03,0x22,0x14,0x08,							// 62 >
0x05,0x40,0x80,0x8D,0x88,0x70,					// 63 ?
0x05,0x1E,0x21,0x2F,0x2B,0x1E,					// 64 @
0x07,0x01,0x07,0xBD,0xC4,0x3D,0x07,0x01,		// 65 A
0x06,0x81,0xFF,0x91,0x91,0x91,0x6E,				// 66 B
0x05,0x7E,0x81,0x81,0x81,0xC2,					// 67 C
0x06,0x81,0xFF,0x81,0x81,0x42,0x3C,				// 68 D
0x06,0x81,0xFF,0x91,0xB9,0x81,0xC3,				// 69 E
0x06,0x81,0xFF,0x91,0xB8,0x80,0xC0,				// 70 F
0x06,0x7E,0x81,0x81,0x89,0xCE,0x08,				// 71 G
0x07,0x81,0xFF,0x91,0x10,0x91,0xFF,0x81,			// 72 H
0x05,0x81,0x81,0xFF,0x81,0x81,					// 73 I
0x05,0x06,0x81,0x81,0xFE,0x80,					// 74 J
0x07,0x81,0xFF,0x89,0x18,0xA4,0xC3,0x81,			// 75 K
0x05,0x81,0xFF,0x81,0x01,0x07,					// 76 L
0x07,0x81,0xFF,0xE1,0x10,0xE1,0xFF,0x81,		// 77 M
0x07,0x81,0xFF,0xE1,0x1C,0x83,0xFF,0x80,		// 78 N
0x05,0x7E,0x81,0x81,0x81,0x7E,					// 79 O
0x05,0x81,0xFF,0x89,0x88,0x70,					// 80 P
0x05,0x7C,0x82,0x83,0x83,0x7D,					// 81 Q
0x07,0x81,0xFF,0x89,0x88,0x8C,0x72,0x01,			// 82 R
0x05,0x63,0x92,0x91,0x51,0xCE,					// 83 S
0x07,0xC0,0x80,0x81,0xFF,0x81,0x80,0xC0,		// 84 T
0x07,0x80,0xFE,0x81,0x01,0x81,0xFE,0x80,		// 85 U
0x07,0x80,0xE0,0x9C,0x03,0x9C,0xE0,0x80,			// 86 V
0x07,0x80,0xFE,0x81,0x1E,0x81,0xFE,0x80,		// 87 W
0x07,0x81,0xC3,0x24,0x18,0x24,0xC3,0x81,		// 88 X
0x07,0x80,0xC0,0xB1,0x0F,0xB1,0xC0,0x80,		// 89 Y
0x05,0xC3,0x85,0x99,0xA1,0xC3,					// 90 Z
0x03,0xFF,0x81,0x81,							// 91 [
0x06,0xC0,0x20,0x10,0x08,0x04,0x03,				// 92 BACKSLASH
0x03,0x81,0x81,0xFF,							// 93 ]
0x05,0x10,0x20,0x40,0x20,0x10,					// 94 ^
0x05,0x01,0x01,0x01,0x01,0x01,					// 95 _
0x01,0xE0,										// 96 '
0x06,0x16,0x29,0x29,0x29,0x1F,0x01,				// 97 a
0x06,0x81,0xFF,0x11,0x21,0x21,0x1E,				// 98 b
0x05,0x1E,0x21,0x21,0x21,0x32,					// 99 c
0x06,0x1E,0x21,0x21,0x91,0xFF,0x01,				//100 d
0x05,0x1E,0x29,0x29,0x29,0x19,					//101 e
0x05,0x21,0x7F,0xA1,0xA1,0xA1,					//102 f
0x06,0x18,0x25,0x25,0x15,0x3E,0x20,				//103 g
0x07,0x81,0xFF,0x11,0x20,0x21,0x1F,0x01,		//104 h
0x05,0x21,0x21,0xBF,0x01,0x01,					//105 i
0x04,0x21,0x21,0xA1,0x3E,						//106 j
0x06,0x81,0xFF,0x08,0x2D,0x33,0x21,				//107 k
0x05,0x01,0x81,0xFF,0x01,0x01,					//108 l
0x07,0x21,0x3F,0x21,0x1F,0x21,0x1F,0x01,		//109 m
0x07,0x21,0x3F,0x11,0x20,0x21,0x1F,0x01,		//110 n
0x05,0x1E,0x21,0x21,0x21,0x1E,					//111 o
0x06,0x21,0x3F,0x15,0x24,0x24,0x18,				//112 p
0x06,0x18,0x24,0x24,0x15,0x3F,0x21,				//113 q
0x05,0x21,0x3F,0x11,0x21,0x21,					//114 r
0x05,0x13,0x29,0x29,0x29,0x36,					//115 s
0x06,0x20,0x7E,0x21,0x21,0x21,0x02,				//116 t
0x07,0x20,0x3E,0x01,0x01,0x22,0x3F,0x01,		//117 u
0x07,0x20,0x38,0x26,0x01,0x26,0x38,0x20,		//118 v
0x07,0x20,0x3E,0x21,0x0E,0x21,0x3E,0x20,		//119 w
0x06,0x21,0x33,0x0C,0x0C,0x33,0x21,				//120 x
0x07,0x20,0x31,0x29,0x07,0x2D,0x30,0x20,			//121 y
0x05,0x33,0x25,0x29,0x31,0x23,					//122 z
0x04,0x08,0x36,0x41,0x41,						//123 {
0x01,0xFF,										//124 |
0x04,0x41,0x41,0x36,0x08,						//125 }
0x06,0x08,0x10,0x10,0x08,0x08,0x10,				//126 ~
0x04,0x78,0x84,0x85,0x86,						//127 Ç
0x07,0x20,0xBE,0x01,0x01,0x22,0xBF,0x01,		//128 ü
0x05,0x0E,0x15,0x55,0x95,0x0D,					//129 é
0x06,0x0A,0x55,0x95,0x55,0x0F,0x01,				//130 â
0x06,0x0A,0x55,0x15,0x15,0x4F,0x01,				//131 ä
0x06,0x0A,0x95,0x55,0x15,0x0F,0x01,				//132 à
0x06,0x0A,0x15,0x55,0x15,0x0F,0x01,				//133 å
0x03,0x38,0x45,0x46,							//134 ç
0x05,0x0E,0x55,0x95,0x55,0x0D,					//135 ê
0x05,0x0E,0x55,0x15,0x55,0x0D,					//136 ë
0x05,0x0E,0x95,0x55,0x15,0x0D,					//137 è
0x05,0x01,0x51,0x1F,0x41,0x01,					//138 ï
0x05,0x01,0x51,0x9F,0x41,0x01,					//139 î
0x05,0x01,0x91,0x5F,0x01,0x01,					//140 ì
0x07,0x01,0x07,0x9D,0x24,0x9D,0x07,0x01,			//141 Ä
0x07,0x01,0x07,0x1D,0xA4,0x1D,0x07,0x01,		//142 Å
0x06,0x41,0x7F,0x49,0xDD,0xC1,0x63,				//143 É
0x08,0x16,0x29,0x29,0x29,0x1E,0x29,0x29,0x29,	//144 æ
0x08,0x01,0x07,0x1D,0x64,0xFF,0x91,0x91,0x81,	//145 Æ
0x05,0x0E,0x51,0x91,0x51,0x0E,					//146 ô
0x05,0x0E,0x51,0x11,0x51,0x0E,					//147 ö
0x05,0x0E,0x91,0x51,0x11,0x0E,					//148 ò
0x07,0x10,0x1E,0x41,0x81,0x52,0x1F,0x01,		//149 û
0x07,0x10,0x1E,0x81,0x41,0x12,0x1F,0x01,		//150 ù
0x05,0x11,0x49,0x06,0x44,0x18,					//151 ÿ
0x05,0x1E,0xA1,0x21,0xA1,0x1E,					//152 Ö
0x07,0x20,0xBE,0x21,0x01,0x21,0xBE,0x20,		//153 Ü
0x07,0x01,0x1C,0x26,0x2A,0x32,0x1C,0x40,		//154 ø
0x06,0x11,0x7F,0x91,0x91,0x81,0x61,				//155 £
0x07,0x01,0x3C,0x46,0x5A,0x62,0x3C,0x80,		//156 Ø
0x05,0x22,0x14,0x08,0x14,0x22,					//157 ×
0x05,0x01,0x11,0x7F,0x90,0x80,					//158 ƒ
0x06,0x0A,0x15,0x55,0x95,0x0F,0x01,				//159 á
0x05,0x01,0x11,0x5F,0x81,0x01,					//160 í
0x05,0x0E,0x11,0x51,0x91,0x0E,					//161 ó
0x07,0x10,0x1E,0x41,0x81,0x12,0x1F,0x01,		//162 ú
0x07,0x21,0x3F,0x91,0xA0,0xA1,0x1F,0x01,			//163 ñ
0x07,0x21,0x3F,0xB1,0x8C,0xA3,0x3F,0x20			//164 Ñ
};

//entero 2bytes
const uint16_t char_index[] PROGMEM =
{
0x000,0x002,0x004,0x008,0x00E,0x014,0x01A,
0x020,0x022,0x026,0x02A,0x030,0x036,0x039,
0x03F,0x042,0x049,0x04F,0x055,0x05B,0x061,
0x068,0x06E,0x074,0x07A,0x080,0x086,0x089,
0x08C,0x090,0x094,0x098,0x09E,0x0A4,0x0AC,
0x0B3,0x0B9,0x0C0,0x0C7,0x0CE,0x0D5,0x0DD,
0x0E3,0x0E9,0x0F1,0x0F7,0x0FF,0x107,0x10D,
0x113,0x119,0x121,0x127,0x12F,0x137,0x13F,
0x147,0x14F,0x157,0x15D,0x161,0x168,0x16C,
0x172,0x178,0x17A,0x181,0x188,0x18E,0x195,
0x19B,0x1A1,0x1A8,0x1B0,0x1B6,0x1BB,0x1C2,
0x1C8,0x1D0,0x1D8,0x1DE,0x1E5,0x1EC,0x1F2,
0x1F8,0x1FF,0x207,0x20F,0x217,0x21E,0x226,
0x22C,0x231,0x233,0x238,0x23F,0x244,0x24C,
0x252,0x259,0x260,0x267,0x26E,0x272,0x278,
0x27E,0x284,0x28A,0x290,0x296,0x29E,0x2A6,
0x2AD,0x2B6,0x2BF,0x2C5,0x2CB,0x2D1,0x2D9,
0x2E1,0x2E7,0x2ED,0x2F5,0x2FD,0x304,0x30C,
0x312,0x318,0x31F,0x325,0x32B,0x333,0x33B
};

/*
"ARQUITECTURA DE COMPUTADORAS 2016-01. Proyecto Final del Curso. Profesor: Ing. Bady Elder Cruz Días... los que vamos a vivir te saludan." //136 caracteres
*/


void SerialPrintCharacter(byte character)
{
	//Serial.print("Caracter: "); Serial.println((unsigned char)(character));
	character -= 32;
	int pos = pgm_read_word_near(char_index + character);
	int size = pgm_read_byte_near(charmap + pos);
	//Serial.print("pos: "); Serial.println(pos);
	//Serial.print("size: "); Serial.println(size);
	pos = pos + 1;
	for (int i = 0; i < size; ++i)
	{
		//Serial.print(pgm_read_byte_near(charmap+pos+i));
		//Serial.print(" ");
	}
	//Serial.println();
}

void loadCharacter(byte character)
{
	character -= 32;
	int pos = pgm_read_word_near(char_index + character);
	int size = pgm_read_byte_near(charmap + pos);
	pos = pos + 1;
	for (int i = 0; i < size; ++i)
	{
		//buffer[8 + i] = pgm_read_byte_near(charmap + pos + i);
	}
	for (int i = 0; i < 8; ++i)
	{

	}
}


struct character_handler
{
	uint16_t pos;
	byte size;
	character_handler()
	{
		size = B11111111;
	}
	character_handler(uint16_t pos, byte size) : pos(pos), size(size) {};
	character_handler(byte character)
	{
		character = constrain(character, _FIRST_CHAR, _LAST_CHAR);
		character -= _FIRST_CHAR;
		pos = pgm_read_word_near(char_index + character);
		size = pgm_read_byte_near(charmap + pos);
		pos += 1;
	}
	byte getByte(byte bytePos)
	{
		if (size == B11111111)
			return size;
		bytePos = constrain(bytePos, 0, size - 1);
		return pgm_read_byte_near(charmap + pos + bytePos);
	}
};

#endif //_UTL_H_